{% from "haproxy/map.jinja" import haproxy, haproxy_role with context %}

global
    log         127.0.0.1 local0 {{ haproxy.loglevel }}

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4096
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # safety first
    tune.ssl.default-dh-param 2048


defaults
    log                     global
    mode                    http

    # let's extend default httplog format to capture ssl and request-id details
#    option httplog
    log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %CC\ \ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r\ {request_id=%ID\ ssl_version=%sslv\ ssl_cypher=%sslc}

    option                  http-server-close
    option                  redispatch
    option                  forwardfor

    retries                 3

    timeout connect         5s  # let's be pragmatical on chrome prefetch and slowloris attack
    timeout http-request    5s  # "
    timeout client          60s
    timeout server          60s
    timeout tunnel          1h
    timeout queue           60s
    timeout http-keep-alive 5m
    timeout check           10s
    timeout tarpit          60s

    maxconn                 3141

    unique-id-format %{+X}o\ %ci%cp_%fi%fp_%Ts_%rt%pid
    unique-id-header X-Request-ID


{% if haproxy.this.ssl %}

    frontend http
        bind *:{{haproxy.this.http_port}}
        reqadd X-Forwarded-Proto:\ http
        capture request header X-Request-ID len 64
        capture request header User-Agent len 200

        redirect scheme https


    frontend https
        bind *:{{haproxy.this.https_port}} ssl crt /etc/ssl/certs/ssl.pem ciphers {{haproxy.this.ciphers}}
        reqadd X-Forwarded-Proto:\ https
        capture request header X-Request-ID len 64
        capture request header User-Agent len 200

        redirect scheme https if !{ ssl_fc }
        default_backend             {{haproxy_role}}

{% else %}

    frontend http
        bind *:{{haproxy.this.http_port}}
        reqadd X-Forwarded-Proto:\ http
        capture request header X-Request-ID len 64
        capture request header User-Agent len 200

        default_backend             {{haproxy_role}}

{% endif %}


# make sure you put 8880 behind firewall
listen stats
  bind 0.0.0.0:8880
  stats enable
  stats uri     /
  stats refresh 5s


backend {{haproxy_role}}
    balance      roundrobin

    # for sticky sessions:
    # cookie  LBSTICKY insert indirect nocache httponly secure maxlife 8h
    # server  app1 10.10.10.10:8080 cookie app1

    {% for host, ips in salt['mine.get']('roles:'+haproxy_role, 'network.ip_addrs', 'grain').iteritems() %}
    server       {{haproxy_role}}{{loop.index}} {{ips[0]}}:{{haproxy.this.downstream_port}} check
    {% endfor %}

#########
# debug #
#########
#
# haproxy: {{haproxy}}
#
# haproxy.role: {{haproxy.role}}
